/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "wchar.h"

int wstrlen(const wchar_t *s)
{
	int cnt = 0;
	while(*s++)
		cnt++;
	return cnt;
}


typedef struct SWIGCDATA {
    char *data;
    int   len;
} SWIGCDATA;



static SWIGCDATA cdata_void(void *ptr, int nelements) {



   SWIGCDATA d;
   d.data = (char *) ptr;



   d.len  = nelements;

   return d;
}


static jbyteArray SWIG_JavaArrayOutCDATA(JNIEnv *jenv, char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}



#include <wchar.h>
#include <EFALAPI.h>
#include <EFAL.h>
using namespace EFAL;



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jbyteArray JNICALL Java_JFALJNI_cdata(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jbyteArray jresult = 0 ;
  void *arg1 = (void *) 0 ;
  int arg2 ;
  SWIGCDATA result;
  
  (void)jenv;
  (void)jcls;
  arg2 = 1;
  arg1 = *(void **)&jarg1; 
  arg2 = (int)jarg2; 
  result = cdata_void(arg1,arg2);
  jresult = SWIG_JavaArrayOutCDATA(jenv, (char *)(&result)->data, (&result)->len); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_memmove(JNIEnv *jenv, jclass jcls, jlong jarg1, jbyteArray jarg2) {
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (void *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (int) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  memmove(arg1,(void const *)arg2,arg3);
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
}


SWIGEXPORT void JNICALL Java_JFALJNI_EFALDATE_1year_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EFALDATE *arg1 = (EFALDATE *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALDATE **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->year = arg2;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_EFALDATE_1year_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EFALDATE *arg1 = (EFALDATE *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALDATE **)&jarg1; 
  result = (int) ((arg1)->year);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_EFALDATE_1month_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EFALDATE *arg1 = (EFALDATE *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALDATE **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->month = arg2;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_EFALDATE_1month_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EFALDATE *arg1 = (EFALDATE *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALDATE **)&jarg1; 
  result = (int) ((arg1)->month);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_EFALDATE_1day_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EFALDATE *arg1 = (EFALDATE *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALDATE **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->day = arg2;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_EFALDATE_1day_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EFALDATE *arg1 = (EFALDATE *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALDATE **)&jarg1; 
  result = (int) ((arg1)->day);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_new_1EFALDATE(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EFALDATE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (EFALDATE *)new EFALDATE();
  *(EFALDATE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_delete_1EFALDATE(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EFALDATE *arg1 = (EFALDATE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EFALDATE **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_JFALJNI_EFALTIME_1hour_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EFALTIME *arg1 = (EFALTIME *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALTIME **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->hour = arg2;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_EFALTIME_1hour_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EFALTIME *arg1 = (EFALTIME *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALTIME **)&jarg1; 
  result = (int) ((arg1)->hour);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_EFALTIME_1minute_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EFALTIME *arg1 = (EFALTIME *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALTIME **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->minute = arg2;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_EFALTIME_1minute_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EFALTIME *arg1 = (EFALTIME *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALTIME **)&jarg1; 
  result = (int) ((arg1)->minute);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_EFALTIME_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EFALTIME *arg1 = (EFALTIME *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALTIME **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_EFALTIME_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EFALTIME *arg1 = (EFALTIME *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALTIME **)&jarg1; 
  result = (int) ((arg1)->second);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_EFALTIME_1millisecond_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EFALTIME *arg1 = (EFALTIME *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALTIME **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->millisecond = arg2;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_EFALTIME_1millisecond_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EFALTIME *arg1 = (EFALTIME *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALTIME **)&jarg1; 
  result = (int) ((arg1)->millisecond);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_new_1EFALTIME(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EFALTIME *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (EFALTIME *)new EFALTIME();
  *(EFALTIME **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_delete_1EFALTIME(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EFALTIME *arg1 = (EFALTIME *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EFALTIME **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_JFALJNI_EFALDATETIME_1year_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EFALDATETIME *arg1 = (EFALDATETIME *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALDATETIME **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->year = arg2;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_EFALDATETIME_1year_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EFALDATETIME *arg1 = (EFALDATETIME *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALDATETIME **)&jarg1; 
  result = (int) ((arg1)->year);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_EFALDATETIME_1month_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EFALDATETIME *arg1 = (EFALDATETIME *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALDATETIME **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->month = arg2;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_EFALDATETIME_1month_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EFALDATETIME *arg1 = (EFALDATETIME *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALDATETIME **)&jarg1; 
  result = (int) ((arg1)->month);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_EFALDATETIME_1day_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EFALDATETIME *arg1 = (EFALDATETIME *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALDATETIME **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->day = arg2;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_EFALDATETIME_1day_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EFALDATETIME *arg1 = (EFALDATETIME *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALDATETIME **)&jarg1; 
  result = (int) ((arg1)->day);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_EFALDATETIME_1hour_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EFALDATETIME *arg1 = (EFALDATETIME *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALDATETIME **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->hour = arg2;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_EFALDATETIME_1hour_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EFALDATETIME *arg1 = (EFALDATETIME *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALDATETIME **)&jarg1; 
  result = (int) ((arg1)->hour);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_EFALDATETIME_1minute_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EFALDATETIME *arg1 = (EFALDATETIME *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALDATETIME **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->minute = arg2;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_EFALDATETIME_1minute_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EFALDATETIME *arg1 = (EFALDATETIME *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALDATETIME **)&jarg1; 
  result = (int) ((arg1)->minute);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_EFALDATETIME_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EFALDATETIME *arg1 = (EFALDATETIME *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALDATETIME **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_EFALDATETIME_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EFALDATETIME *arg1 = (EFALDATETIME *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALDATETIME **)&jarg1; 
  result = (int) ((arg1)->second);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_EFALDATETIME_1millisecond_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EFALDATETIME *arg1 = (EFALDATETIME *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALDATETIME **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->millisecond = arg2;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_EFALDATETIME_1millisecond_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EFALDATETIME *arg1 = (EFALDATETIME *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EFALDATETIME **)&jarg1; 
  result = (int) ((arg1)->millisecond);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_new_1EFALDATETIME(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EFALDATETIME *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (EFALDATETIME *)new EFALDATETIME();
  *(EFALDATETIME **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_delete_1EFALDATETIME(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EFALDATETIME *arg1 = (EFALDATETIME *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EFALDATETIME **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1NEUTRAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_NEUTRAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1ISO8859_11_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_ISO8859_1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1ISO8859_12_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_ISO8859_2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1ISO8859_13_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_ISO8859_3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1ISO8859_14_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_ISO8859_4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1ISO8859_15_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_ISO8859_5;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1ISO8859_16_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_ISO8859_6;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1ISO8859_17_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_ISO8859_7;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1ISO8859_18_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_ISO8859_8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1ISO8859_19_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_ISO8859_9;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1WLATIN1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_WLATIN1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1WLATIN2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_WLATIN2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1WARABIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_WARABIC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1WCYRILLIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_WCYRILLIC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1WGREEK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_WGREEK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1WHEBREW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_WHEBREW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1WTURKISH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_WTURKISH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1WTCHINESE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_WTCHINESE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1WSCHINESE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_WSCHINESE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1WJAPANESE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_WJAPANESE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1WKOREAN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_WKOREAN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1CP437_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_CP437;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1CP850_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_CP850;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1CP852_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_CP852;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1CP857_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_CP857;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1CP860_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_CP860;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1CP861_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_CP861;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1CP863_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_CP863;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1CP865_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_CP865;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1CP855_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_CP855;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1CP864_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_CP864;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1CP869_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_CP869;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1WTHAI_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_WTHAI;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1WBALTICRIM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_WBALTICRIM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1WVIETNAMESE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_WVIETNAMESE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1UTF8_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_UTF8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_CHARSET_1UTF16_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MICHARSET)Ellis::CHARSET_UTF16;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_OT_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::ALLTYPE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::ALLTYPE_TYPE)Ellis::OT_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_OT_1CHAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::ALLTYPE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::ALLTYPE_TYPE)Ellis::OT_CHAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_OT_1DECIMAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::ALLTYPE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::ALLTYPE_TYPE)Ellis::OT_DECIMAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_OT_1INTEGER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::ALLTYPE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::ALLTYPE_TYPE)Ellis::OT_INTEGER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_OT_1SMALLINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::ALLTYPE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::ALLTYPE_TYPE)Ellis::OT_SMALLINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_OT_1DATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::ALLTYPE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::ALLTYPE_TYPE)Ellis::OT_DATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_OT_1LOGICAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::ALLTYPE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::ALLTYPE_TYPE)Ellis::OT_LOGICAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_OT_1FLOAT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::ALLTYPE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::ALLTYPE_TYPE)Ellis::OT_FLOAT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_OT_1OBJECT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::ALLTYPE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::ALLTYPE_TYPE)Ellis::OT_OBJECT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_OT_1NULL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::ALLTYPE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::ALLTYPE_TYPE)Ellis::OT_NULL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_OT_1BINARY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::ALLTYPE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::ALLTYPE_TYPE)Ellis::OT_BINARY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_OT_1STYLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::ALLTYPE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::ALLTYPE_TYPE)Ellis::OT_STYLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_OT_1INTEGER64_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::ALLTYPE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::ALLTYPE_TYPE)Ellis::OT_INTEGER64;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_OT_1TIMESPAN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::ALLTYPE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::ALLTYPE_TYPE)Ellis::OT_TIMESPAN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_OT_1TIME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::ALLTYPE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::ALLTYPE_TYPE)Ellis::OT_TIME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_OT_1DATETIME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::ALLTYPE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::ALLTYPE_TYPE)Ellis::OT_DATETIME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_eTablePackTypePackGraphics_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::ETablePackType result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::ETablePackType)Ellis::eTablePackTypePackGraphics;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_eTablePackTypeRebuildGraphics_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::ETablePackType result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::ETablePackType)Ellis::eTablePackTypeRebuildGraphics;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_eTablePackTypePackIndex_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::ETablePackType result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::ETablePackType)Ellis::eTablePackTypePackIndex;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_eTablePackTypeRebuildIndex_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::ETablePackType result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::ETablePackType)Ellis::eTablePackTypeRebuildIndex;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_eTablePackTypeRemoveDeletedRecords_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::ETablePackType result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::ETablePackType)Ellis::eTablePackTypeRemoveDeletedRecords;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_eTablePackTypeCompactDB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::ETablePackType result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::ETablePackType)Ellis::eTablePackTypeCompactDB;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_eTablePackTypeAll_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::ETablePackType result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::ETablePackType)Ellis::eTablePackTypeAll;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_DRECT_1x1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Ellis::DRECT *arg1 = (Ellis::DRECT *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::DRECT **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->x1 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_JFALJNI_DRECT_1x1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Ellis::DRECT *arg1 = (Ellis::DRECT *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::DRECT **)&jarg1; 
  result = (double) ((arg1)->x1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_DRECT_1y1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Ellis::DRECT *arg1 = (Ellis::DRECT *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::DRECT **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->y1 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_JFALJNI_DRECT_1y1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Ellis::DRECT *arg1 = (Ellis::DRECT *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::DRECT **)&jarg1; 
  result = (double) ((arg1)->y1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_DRECT_1x2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Ellis::DRECT *arg1 = (Ellis::DRECT *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::DRECT **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->x2 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_JFALJNI_DRECT_1x2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Ellis::DRECT *arg1 = (Ellis::DRECT *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::DRECT **)&jarg1; 
  result = (double) ((arg1)->x2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_DRECT_1y2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Ellis::DRECT *arg1 = (Ellis::DRECT *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::DRECT **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->y2 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_JFALJNI_DRECT_1y2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Ellis::DRECT *arg1 = (Ellis::DRECT *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::DRECT **)&jarg1; 
  result = (double) ((arg1)->y2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_new_1DRECT(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ellis::DRECT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::DRECT *)new Ellis::DRECT();
  *(Ellis::DRECT **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_delete_1DRECT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ellis::DRECT *arg1 = (Ellis::DRECT *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ellis::DRECT **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_JFALJNI_DPNT_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Ellis::DPNT *arg1 = (Ellis::DPNT *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::DPNT **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jdouble JNICALL Java_JFALJNI_DPNT_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Ellis::DPNT *arg1 = (Ellis::DPNT *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::DPNT **)&jarg1; 
  result = (double) ((arg1)->x);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_DPNT_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Ellis::DPNT *arg1 = (Ellis::DPNT *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::DPNT **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jdouble JNICALL Java_JFALJNI_DPNT_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Ellis::DPNT *arg1 = (Ellis::DPNT *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::DPNT **)&jarg1; 
  result = (double) ((arg1)->y);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_new_1DPNT(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ellis::DPNT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::DPNT *)new Ellis::DPNT();
  *(Ellis::DPNT **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_delete_1DPNT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ellis::DPNT *arg1 = (Ellis::DPNT *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ellis::DPNT **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_JFALJNI_DRANGE_1min_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Ellis::DRANGE *arg1 = (Ellis::DRANGE *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::DRANGE **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->min = arg2;
}


SWIGEXPORT jdouble JNICALL Java_JFALJNI_DRANGE_1min_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Ellis::DRANGE *arg1 = (Ellis::DRANGE *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::DRANGE **)&jarg1; 
  result = (double) ((arg1)->min);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_DRANGE_1max_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Ellis::DRANGE *arg1 = (Ellis::DRANGE *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::DRANGE **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->max = arg2;
}


SWIGEXPORT jdouble JNICALL Java_JFALJNI_DRANGE_1max_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Ellis::DRANGE *arg1 = (Ellis::DRANGE *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::DRANGE **)&jarg1; 
  result = (double) ((arg1)->max);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_new_1DRANGE(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ellis::DRANGE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::DRANGE *)new Ellis::DRANGE();
  *(Ellis::DRANGE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_delete_1DRANGE(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ellis::DRANGE *arg1 = (Ellis::DRANGE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ellis::DRANGE **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_JFALJNI_LPNT_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Ellis::LPNT *arg1 = (Ellis::LPNT *) 0 ;
  MI_INT32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::LPNT **)&jarg1; 
  arg2 = (MI_INT32)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_LPNT_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ellis::LPNT *arg1 = (Ellis::LPNT *) 0 ;
  MI_INT32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::LPNT **)&jarg1; 
  result = (MI_INT32) ((arg1)->x);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_LPNT_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Ellis::LPNT *arg1 = (Ellis::LPNT *) 0 ;
  MI_INT32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::LPNT **)&jarg1; 
  arg2 = (MI_INT32)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_LPNT_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ellis::LPNT *arg1 = (Ellis::LPNT *) 0 ;
  MI_INT32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::LPNT **)&jarg1; 
  result = (MI_INT32) ((arg1)->y);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_new_1LPNT(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ellis::LPNT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::LPNT *)new Ellis::LPNT();
  *(Ellis::LPNT **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_delete_1LPNT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ellis::LPNT *arg1 = (Ellis::LPNT *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ellis::LPNT **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_JFALJNI_LRECT_1x1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Ellis::LRECT *arg1 = (Ellis::LRECT *) 0 ;
  MI_INT32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::LRECT **)&jarg1; 
  arg2 = (MI_INT32)jarg2; 
  if (arg1) (arg1)->x1 = arg2;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_LRECT_1x1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ellis::LRECT *arg1 = (Ellis::LRECT *) 0 ;
  MI_INT32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::LRECT **)&jarg1; 
  result = (MI_INT32) ((arg1)->x1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_LRECT_1y1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Ellis::LRECT *arg1 = (Ellis::LRECT *) 0 ;
  MI_INT32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::LRECT **)&jarg1; 
  arg2 = (MI_INT32)jarg2; 
  if (arg1) (arg1)->y1 = arg2;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_LRECT_1y1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ellis::LRECT *arg1 = (Ellis::LRECT *) 0 ;
  MI_INT32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::LRECT **)&jarg1; 
  result = (MI_INT32) ((arg1)->y1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_LRECT_1x2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Ellis::LRECT *arg1 = (Ellis::LRECT *) 0 ;
  MI_INT32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::LRECT **)&jarg1; 
  arg2 = (MI_INT32)jarg2; 
  if (arg1) (arg1)->x2 = arg2;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_LRECT_1x2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ellis::LRECT *arg1 = (Ellis::LRECT *) 0 ;
  MI_INT32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::LRECT **)&jarg1; 
  result = (MI_INT32) ((arg1)->x2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_LRECT_1y2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Ellis::LRECT *arg1 = (Ellis::LRECT *) 0 ;
  MI_INT32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::LRECT **)&jarg1; 
  arg2 = (MI_INT32)jarg2; 
  if (arg1) (arg1)->y2 = arg2;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_LRECT_1y2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ellis::LRECT *arg1 = (Ellis::LRECT *) 0 ;
  MI_INT32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ellis::LRECT **)&jarg1; 
  result = (MI_INT32) ((arg1)->y2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_new_1LRECT(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ellis::LRECT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::LRECT *)new Ellis::LRECT();
  *(Ellis::LRECT **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_delete_1LRECT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ellis::LRECT *arg1 = (Ellis::LRECT *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ellis::LRECT **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_eNone_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::CalloutLineType result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::CalloutLineType)Ellis::eNone;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_eSimple_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::CalloutLineType result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::CalloutLineType)Ellis::eSimple;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_eArrow_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::CalloutLineType result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::CalloutLineType)Ellis::eArrow;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_DIST_1SPHERICAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::DIST_CALC_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::DIST_CALC_TYPE)Ellis::DIST_SPHERICAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_DIST_1CARTESIAN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::DIST_CALC_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::DIST_CALC_TYPE)Ellis::DIST_CARTESIAN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_UNIT_1UNDEFINED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MIUNIT result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MIUNIT)Ellis::UNIT_UNDEFINED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_UNIT_1MILE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ellis::MIUNIT result;
  
  (void)jenv;
  (void)jcls;
  result = (Ellis::MIUNIT)Ellis::UNIT_MILE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbPoint_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbPoint;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbLineString_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbLineString;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbPolygon_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbPolygon;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbTriangle_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbTriangle;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbMultiPoint_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbMultiPoint;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbMultiLineString_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbMultiLineString;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbMultiPolygon_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbMultiPolygon;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbGeometryCollection_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbGeometryCollection;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbPolyhedralSurface_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbPolyhedralSurface;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbTIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbTIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_ewkbLegacyText_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)ewkbLegacyText;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbPointZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbPointZ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbLineStringZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbLineStringZ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbPolygonZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbPolygonZ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbTrianglez_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbTrianglez;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbMultiPointZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbMultiPointZ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbMultiLineStringZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbMultiLineStringZ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbMultiPolygonZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbMultiPolygonZ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbGeometryCollectionZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbGeometryCollectionZ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbPolyhedralSurfaceZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbPolyhedralSurfaceZ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbTINZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbTINZ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbPointM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbPointM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbLineStringM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbLineStringM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbPolygonM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbPolygonM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbTriangleM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbTriangleM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbMultiPointM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbMultiPointM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbMultiLineStringM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbMultiLineStringM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbMultiPolygonM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbMultiPolygonM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbGeometryCollectionM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbGeometryCollectionM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbPolyhedralSurfaceM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbPolyhedralSurfaceM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbTINM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbTINM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbPointZM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbPointZM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbLineStringZM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbLineStringZM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbPolygonZM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbPolygonZM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbTriangleZM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbTriangleZM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbMultiPointZM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbMultiPointZM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbMultiLineStringZM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbMultiLineStringZM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbMultiPolygonZM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbMultiPolygonZM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbGeometryCollectionZM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbGeometryCollectionZM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbPolyhedralSurfaceZM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbPolyhedralSurfaceZM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_wkbTinZM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  WKBGeometryType result;
  
  (void)jenv;
  (void)jcls;
  result = (WKBGeometryType)wkbTinZM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_InitializeSession(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ResourceStringCallback *arg1 = (ResourceStringCallback *) 0 ;
  EFALHANDLE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ResourceStringCallback **)&jarg1; 
  result = (EFALHANDLE)EFAL::InitializeSession((wchar_t const *(*)(wchar_t const *))arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_DestroySession(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EFALHANDLE arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  EFAL::DestroySession(arg1);
}


SWIGEXPORT jint JNICALL Java_JFALJNI_GetSystemCharset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  EFALHANDLE arg1 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  result = (Ellis::MICHARSET)EFAL::GetSystemCharset(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JFALJNI_GetCharsetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  EFALHANDLE arg1 ;
  Ellis::MICHARSET arg2 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (Ellis::MICHARSET)jarg2; 
  result = (wchar_t *)EFAL::GetCharsetName(arg1,arg2);
  
  jsize result_len = 0;
  jchar *conv_buf = 0;
  if(result) {
    result_len = wstrlen(result);
    conv_buf = new jchar[result_len + 1];
    for (jsize i = 0; i < result_len; ++i) {
      conv_buf[i] = (jchar)result[i];
    }
    conv_buf[result_len] = (jchar)'\0';
  }
  else {
    jsize result_len = 1;
    conv_buf = new jchar[result_len];
    conv_buf[0] = (jchar)'\0';
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf;
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_HaveErrors(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  result = (bool)EFAL::HaveErrors(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_ClearErrors(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EFALHANDLE arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  EFAL::ClearErrors(arg1);
}


SWIGEXPORT jint JNICALL Java_JFALJNI_NumErrors(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  EFALHANDLE arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  result = (int)EFAL::NumErrors(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JFALJNI_GetError(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  EFALHANDLE arg1 ;
  int arg2 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (int)jarg2; 
  result = (wchar_t *)EFAL::GetError(arg1,arg2);
  
  jsize result_len = 0;
  jchar *conv_buf = 0;
  if(result) {
    result_len = wstrlen(result);
    conv_buf = new jchar[result_len + 1];
    for (jsize i = 0; i < result_len; ++i) {
      conv_buf[i] = (jchar)result[i];
    }
    conv_buf[result_len] = (jchar)'\0';
  }
  else {
    jsize result_len = 1;
    conv_buf = new jchar[result_len];
    conv_buf[0] = (jchar)'\0';
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_CloseAll(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EFALHANDLE arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  EFAL::CloseAll(arg1);
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_OpenTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  EFALHANDLE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (EFALHANDLE)EFAL::OpenTable(arg1,(wchar_t const *)arg2);
  jresult = (jlong)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_CloseTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  EFAL::CloseTable(arg1,arg2);
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_BeginReadAccess(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (bool)EFAL::BeginReadAccess(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_BeginWriteAccess(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (bool)EFAL::BeginWriteAccess(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_EndAccess(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  EFAL::EndAccess(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetTableCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  MI_UINT32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  result = (MI_UINT32)EFAL::GetTableCount(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetTableHandle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  MI_UINT32 arg2 ;
  EFALHANDLE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (MI_UINT32)jarg2; 
  result = (EFALHANDLE)EFAL::GetTableHandle(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetTableHandle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  EFALHANDLE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (EFALHANDLE)EFAL::GetTableHandle(arg1,(wchar_t const *)arg2);
  jresult = (jlong)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetTableHandleFromTablePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  EFALHANDLE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (EFALHANDLE)EFAL::GetTableHandleFromTablePath(arg1,(wchar_t const *)arg2);
  jresult = (jlong)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_SupportsPack(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  Ellis::ETablePackType arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (Ellis::ETablePackType)jarg3; 
  result = (bool)EFAL::SupportsPack(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_Pack(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  Ellis::ETablePackType arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (Ellis::ETablePackType)jarg3; 
  result = (bool)EFAL::Pack(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JFALJNI_CoordSys2PRJString(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (wchar_t *)EFAL::CoordSys2PRJString(arg1,(wchar_t const *)arg2);
  
  jsize result_len = 0;
  jchar *conv_buf = 0;
  if(result) {
    result_len = wstrlen(result);
    conv_buf = new jchar[result_len + 1];
    for (jsize i = 0; i < result_len; ++i) {
      conv_buf[i] = (jchar)result[i];
    }
    conv_buf[result_len] = (jchar)'\0';
  }
  else {
    jsize result_len = 1;
    conv_buf = new jchar[result_len];
    conv_buf[0] = (jchar)'\0';
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf;
  
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JFALJNI_CoordSys2MBString(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (wchar_t *)EFAL::CoordSys2MBString(arg1,(wchar_t const *)arg2);
  
  jsize result_len = 0;
  jchar *conv_buf = 0;
  if(result) {
    result_len = wstrlen(result);
    conv_buf = new jchar[result_len + 1];
    for (jsize i = 0; i < result_len; ++i) {
      conv_buf[i] = (jchar)result[i];
    }
    conv_buf[result_len] = (jchar)'\0';
  }
  else {
    jsize result_len = 1;
    conv_buf = new jchar[result_len];
    conv_buf[0] = (jchar)'\0';
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf;
  
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JFALJNI_PRJ2CoordSysString(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (wchar_t *)EFAL::PRJ2CoordSysString(arg1,(wchar_t const *)arg2);
  
  jsize result_len = 0;
  jchar *conv_buf = 0;
  if(result) {
    result_len = wstrlen(result);
    conv_buf = new jchar[result_len + 1];
    for (jsize i = 0; i < result_len; ++i) {
      conv_buf[i] = (jchar)result[i];
    }
    conv_buf[result_len] = (jchar)'\0';
  }
  else {
    jsize result_len = 1;
    conv_buf = new jchar[result_len];
    conv_buf[0] = (jchar)'\0';
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf;
  
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JFALJNI_MB2CoordSysString(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (wchar_t *)EFAL::MB2CoordSysString(arg1,(wchar_t const *)arg2);
  
  jsize result_len = 0;
  jchar *conv_buf = 0;
  if(result) {
    result_len = wstrlen(result);
    conv_buf = new jchar[result_len + 1];
    for (jsize i = 0; i < result_len; ++i) {
      conv_buf[i] = (jchar)result[i];
    }
    conv_buf[result_len] = (jchar)'\0';
  }
  else {
    jsize result_len = 1;
    conv_buf = new jchar[result_len];
    conv_buf[0] = (jchar)'\0';
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf;
  
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_RegisterOGCWKTCoordSysCallbacks(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  CoordSys_PRJ2OGCWKT_Callback *arg2 = (CoordSys_PRJ2OGCWKT_Callback *) 0 ;
  CoordSys_OGCWKT2PRJ_Callback *arg3 = (CoordSys_OGCWKT2PRJ_Callback *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = *(CoordSys_PRJ2OGCWKT_Callback **)&jarg2; 
  arg3 = *(CoordSys_OGCWKT2PRJ_Callback **)&jarg3; 
  result = (bool)EFAL::RegisterOGCWKTCoordSysCallbacks(arg1,(wchar_t const *(*)(wchar_t const *))arg2,(wchar_t const *(*)(wchar_t const *))arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_IsValidCoordSys(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (bool)EFAL::IsValidCoordSys(arg1,(wchar_t const *)arg2);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_CreateCoordinateTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  EFALHANDLE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    arg3 = new wchar_t[arg3_len + 1];
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3[i] = ((wchar_t)arg3_pstr[i]);
    }
    arg3[arg3_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  result = (EFALHANDLE)EFAL::CreateCoordinateTransform(arg1,(wchar_t const *)arg2,(wchar_t const *)arg3);
  jresult = (jlong)result; 
  {
    if (arg2) delete[] arg2; 
  }
  {
    if (arg3) delete[] arg3; 
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_DestroyCoordinateTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  EFAL::DestroyCoordinateTransform(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_TransformCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  Ellis::DPNT arg3 ;
  Ellis::DPNT *argp3 ;
  Ellis::DPNT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  argp3 = *(Ellis::DPNT **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Ellis::DPNT");
    return 0;
  }
  arg3 = *argp3; 
  result = EFAL::TransformCoordinate(arg1,arg2,arg3);
  *(Ellis::DPNT **)&jresult = new Ellis::DPNT((const Ellis::DPNT &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_TransformCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  Ellis::DPNT *arg3 = (Ellis::DPNT *) 0 ;
  Ellis::DPNT *arg4 = (Ellis::DPNT *) 0 ;
  MI_UINT32 arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = *(Ellis::DPNT **)&jarg3; 
  arg4 = *(Ellis::DPNT **)&jarg4; 
  arg5 = (MI_UINT32)jarg5; 
  EFAL::TransformCoordinates(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_TransformRect(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  Ellis::DRECT arg3 ;
  Ellis::DRECT *argp3 ;
  Ellis::DRECT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  argp3 = *(Ellis::DRECT **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Ellis::DRECT");
    return 0;
  }
  arg3 = *argp3; 
  result = EFAL::TransformRect(arg1,arg2,arg3);
  *(Ellis::DRECT **)&jresult = new Ellis::DRECT((const Ellis::DRECT &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_ConvertRegistrationPoints2LL(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  Ellis::DPNT *arg2 = (Ellis::DPNT *) 0 ;
  Ellis::LPNT *arg3 = (Ellis::LPNT *) 0 ;
  MI_UINT32 arg4 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = *(Ellis::DPNT **)&jarg2; 
  arg3 = *(Ellis::LPNT **)&jarg3; 
  arg4 = (MI_UINT32)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg5_pstr = jenv->GetStringChars(jarg5, 0);
  if (!arg5_pstr) return 0;
  jsize arg5_len = jenv->GetStringLength(jarg5);
  if (arg5_len) {
    arg5 = new wchar_t[arg5_len + 1];
    for (jsize i = 0; i < arg5_len; ++i) {
      arg5[i] = ((wchar_t)arg5_pstr[i]);
    }
    arg5[arg5_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg5, arg5_pstr);
  
  result = (bool)EFAL::ConvertRegistrationPoints2LL(arg1,arg2,arg3,arg4,(wchar_t const *)arg5);
  jresult = (jboolean)result; 
  {
    if (arg5) delete[] arg5; 
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_JFALJNI_ConvertUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3, jint jarg4) {
  jdouble jresult = 0 ;
  EFALHANDLE arg1 ;
  double arg2 ;
  Ellis::MIUNIT arg3 ;
  Ellis::MIUNIT arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (Ellis::MIUNIT)jarg3; 
  arg4 = (Ellis::MIUNIT)jarg4; 
  result = (double)EFAL::ConvertUnits(arg1,arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_GeometryInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  int *arg3 = (int *) 0 ;
  Ellis::DRECT *arg4 = (Ellis::DRECT *) 0 ;
  Ellis::DPNT *arg5 = (Ellis::DPNT *) 0 ;
  MI_UINT32 *arg6 = (MI_UINT32 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(int **)&jarg3; 
  arg4 = *(Ellis::DRECT **)&jarg4; 
  arg5 = *(Ellis::DPNT **)&jarg5; 
  arg6 = *(MI_UINT32 **)&jarg6; 
  result = (bool)EFAL::GeometryInfo(arg1,(wchar_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_JFALJNI_GetGeometryLength_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jint jarg4) {
  jdouble jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  Ellis::MIUNIT arg3 ;
  Ellis::DIST_CALC_TYPE arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = (Ellis::MIUNIT)jarg3; 
  arg4 = (Ellis::DIST_CALC_TYPE)jarg4; 
  result = (double)EFAL::GetGeometryLength(arg1,(wchar_t const *)arg2,arg3,arg4);
  jresult = (jdouble)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_JFALJNI_GetGeometryPerimeter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jint jarg4) {
  jdouble jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  Ellis::MIUNIT arg3 ;
  Ellis::DIST_CALC_TYPE arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = (Ellis::MIUNIT)jarg3; 
  arg4 = (Ellis::DIST_CALC_TYPE)jarg4; 
  result = (double)EFAL::GetGeometryPerimeter(arg1,(wchar_t const *)arg2,arg3,arg4);
  jresult = (jdouble)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_JFALJNI_GetGeometryArea_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jint jarg4) {
  jdouble jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  Ellis::MIUNIT arg3 ;
  Ellis::DIST_CALC_TYPE arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = (Ellis::MIUNIT)jarg3; 
  arg4 = (Ellis::DIST_CALC_TYPE)jarg4; 
  result = (double)EFAL::GetGeometryArea(arg1,(wchar_t const *)arg2,arg3,arg4);
  jresult = (jdouble)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetFirstPoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  Ellis::DPNT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    arg3 = new wchar_t[arg3_len + 1];
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3[i] = ((wchar_t)arg3_pstr[i]);
    }
    arg3[arg3_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  result = EFAL::GetFirstPoint(arg1,(wchar_t const *)arg2,(wchar_t const *)arg3);
  *(Ellis::DPNT **)&jresult = new Ellis::DPNT((const Ellis::DPNT &)result); 
  {
    if (arg2) delete[] arg2; 
  }
  {
    if (arg3) delete[] arg3; 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetLastPoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  Ellis::DPNT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    arg3 = new wchar_t[arg3_len + 1];
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3[i] = ((wchar_t)arg3_pstr[i]);
    }
    arg3[arg3_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  result = EFAL::GetLastPoint(arg1,(wchar_t const *)arg2,(wchar_t const *)arg3);
  *(Ellis::DPNT **)&jresult = new Ellis::DPNT((const Ellis::DPNT &)result); 
  {
    if (arg2) delete[] arg2; 
  }
  {
    if (arg3) delete[] arg3; 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_PointAtDistance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jdouble jarg4, jint jarg5, jint jarg6) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  double arg4 ;
  Ellis::MIUNIT arg5 ;
  Ellis::DIST_CALC_TYPE arg6 ;
  Ellis::DPNT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    arg3 = new wchar_t[arg3_len + 1];
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3[i] = ((wchar_t)arg3_pstr[i]);
    }
    arg3[arg3_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  arg4 = (double)jarg4; 
  arg5 = (Ellis::MIUNIT)jarg5; 
  arg6 = (Ellis::DIST_CALC_TYPE)jarg6; 
  result = EFAL::PointAtDistance(arg1,(wchar_t const *)arg2,(wchar_t const *)arg3,arg4,arg5,arg6);
  *(Ellis::DPNT **)&jresult = new Ellis::DPNT((const Ellis::DPNT &)result); 
  {
    if (arg2) delete[] arg2; 
  }
  {
    if (arg3) delete[] arg3; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_Buffer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3, jint jarg4, jint jarg5, jlong jarg6, jstring jarg7) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  double arg3 ;
  Ellis::MIUNIT arg4 ;
  Ellis::DIST_CALC_TYPE arg5 ;
  MI_UINT32 arg6 ;
  wchar_t *arg7 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = (double)jarg3; 
  arg4 = (Ellis::MIUNIT)jarg4; 
  arg5 = (Ellis::DIST_CALC_TYPE)jarg5; 
  arg6 = (MI_UINT32)jarg6; 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg7_pstr = jenv->GetStringChars(jarg7, 0);
  if (!arg7_pstr) return 0;
  jsize arg7_len = jenv->GetStringLength(jarg7);
  if (arg7_len) {
    arg7 = new wchar_t[arg7_len + 1];
    for (jsize i = 0; i < arg7_len; ++i) {
      arg7[i] = ((wchar_t)arg7_pstr[i]);
    }
    arg7[arg7_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg7, arg7_pstr);
  
  result = (bool)EFAL::Buffer(arg1,(wchar_t const *)arg2,arg3,arg4,arg5,arg6,(wchar_t const *)arg7);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  {
    if (arg7) delete[] arg7; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_Transform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    arg3 = new wchar_t[arg3_len + 1];
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3[i] = ((wchar_t)arg3_pstr[i]);
    }
    arg3[arg3_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  if (arg4_len) {
    arg4 = new wchar_t[arg4_len + 1];
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4[i] = ((wchar_t)arg4_pstr[i]);
    }
    arg4[arg4_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  result = (bool)EFAL::Transform(arg1,(wchar_t const *)arg2,(wchar_t const *)arg3,(wchar_t const *)arg4);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  {
    if (arg3) delete[] arg3; 
  }
  {
    if (arg4) delete[] arg4; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_Union_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    arg3 = new wchar_t[arg3_len + 1];
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3[i] = ((wchar_t)arg3_pstr[i]);
    }
    arg3[arg3_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  if (arg4_len) {
    arg4 = new wchar_t[arg4_len + 1];
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4[i] = ((wchar_t)arg4_pstr[i]);
    }
    arg4[arg4_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  result = (bool)EFAL::Union(arg1,(wchar_t const *)arg2,(wchar_t const *)arg3,(wchar_t const *)arg4);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  {
    if (arg3) delete[] arg3; 
  }
  {
    if (arg4) delete[] arg4; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_ConvexHull_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    arg3 = new wchar_t[arg3_len + 1];
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3[i] = ((wchar_t)arg3_pstr[i]);
    }
    arg3[arg3_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  result = (bool)EFAL::ConvexHull(arg1,(wchar_t const *)arg2,(wchar_t const *)arg3);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  {
    if (arg3) delete[] arg3; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_Intersect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    arg3 = new wchar_t[arg3_len + 1];
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3[i] = ((wchar_t)arg3_pstr[i]);
    }
    arg3[arg3_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  if (arg4_len) {
    arg4 = new wchar_t[arg4_len + 1];
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4[i] = ((wchar_t)arg4_pstr[i]);
    }
    arg4[arg4_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  result = (bool)EFAL::Intersect(arg1,(wchar_t const *)arg2,(wchar_t const *)arg3,(wchar_t const *)arg4);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  {
    if (arg3) delete[] arg3; 
  }
  {
    if (arg4) delete[] arg4; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_Contains_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    arg3 = new wchar_t[arg3_len + 1];
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3[i] = ((wchar_t)arg3_pstr[i]);
    }
    arg3[arg3_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  result = (bool)EFAL::Contains(arg1,(wchar_t const *)arg2,(wchar_t const *)arg3);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  {
    if (arg3) delete[] arg3; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_IsWithin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    arg3 = new wchar_t[arg3_len + 1];
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3[i] = ((wchar_t)arg3_pstr[i]);
    }
    arg3[arg3_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  result = (bool)EFAL::IsWithin(arg1,(wchar_t const *)arg2,(wchar_t const *)arg3);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  {
    if (arg3) delete[] arg3; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_Intersects_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    arg3 = new wchar_t[arg3_len + 1];
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3[i] = ((wchar_t)arg3_pstr[i]);
    }
    arg3[arg3_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  result = (bool)EFAL::Intersects(arg1,(wchar_t const *)arg2,(wchar_t const *)arg3);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  {
    if (arg3) delete[] arg3; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_EnvelopesIntersect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    arg3 = new wchar_t[arg3_len + 1];
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3[i] = ((wchar_t)arg3_pstr[i]);
    }
    arg3[arg3_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  result = (bool)EFAL::EnvelopesIntersect(arg1,(wchar_t const *)arg2,(wchar_t const *)arg3);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  {
    if (arg3) delete[] arg3; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_GeometryInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  int *arg4 = (int *) 0 ;
  Ellis::DRECT *arg5 = (Ellis::DRECT *) 0 ;
  Ellis::DPNT *arg6 = (Ellis::DPNT *) 0 ;
  MI_UINT32 *arg7 = (MI_UINT32 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = *(Ellis::DRECT **)&jarg5; 
  arg6 = *(Ellis::DPNT **)&jarg6; 
  arg7 = *(MI_UINT32 **)&jarg7; 
  result = (bool)EFAL::GeometryInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_JFALJNI_GetGeometryLength_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jint jarg5) {
  jdouble jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  Ellis::MIUNIT arg4 ;
  Ellis::DIST_CALC_TYPE arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  arg4 = (Ellis::MIUNIT)jarg4; 
  arg5 = (Ellis::DIST_CALC_TYPE)jarg5; 
  result = (double)EFAL::GetGeometryLength(arg1,arg2,arg3,arg4,arg5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_JFALJNI_GetGeometryPerimeter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jint jarg5) {
  jdouble jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  Ellis::MIUNIT arg4 ;
  Ellis::DIST_CALC_TYPE arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  arg4 = (Ellis::MIUNIT)jarg4; 
  arg5 = (Ellis::DIST_CALC_TYPE)jarg5; 
  result = (double)EFAL::GetGeometryPerimeter(arg1,arg2,arg3,arg4,arg5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_JFALJNI_GetGeometryArea_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jint jarg5) {
  jdouble jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  Ellis::MIUNIT arg4 ;
  Ellis::DIST_CALC_TYPE arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  arg4 = (Ellis::MIUNIT)jarg4; 
  arg5 = (Ellis::DIST_CALC_TYPE)jarg5; 
  result = (double)EFAL::GetGeometryArea(arg1,arg2,arg3,arg4,arg5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetFirstPoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  Ellis::DPNT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  if (arg4_len) {
    arg4 = new wchar_t[arg4_len + 1];
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4[i] = ((wchar_t)arg4_pstr[i]);
    }
    arg4[arg4_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  result = EFAL::GetFirstPoint(arg1,arg2,arg3,(wchar_t const *)arg4);
  *(Ellis::DPNT **)&jresult = new Ellis::DPNT((const Ellis::DPNT &)result); 
  {
    if (arg4) delete[] arg4; 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetLastPoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  Ellis::DPNT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  if (arg4_len) {
    arg4 = new wchar_t[arg4_len + 1];
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4[i] = ((wchar_t)arg4_pstr[i]);
    }
    arg4[arg4_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  result = EFAL::GetLastPoint(arg1,arg2,arg3,(wchar_t const *)arg4);
  *(Ellis::DPNT **)&jresult = new Ellis::DPNT((const Ellis::DPNT &)result); 
  {
    if (arg4) delete[] arg4; 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_PointAtDistance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4, jdouble jarg5, jint jarg6, jint jarg7) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  double arg5 ;
  Ellis::MIUNIT arg6 ;
  Ellis::DIST_CALC_TYPE arg7 ;
  Ellis::DPNT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  if (arg4_len) {
    arg4 = new wchar_t[arg4_len + 1];
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4[i] = ((wchar_t)arg4_pstr[i]);
    }
    arg4[arg4_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  arg5 = (double)jarg5; 
  arg6 = (Ellis::MIUNIT)jarg6; 
  arg7 = (Ellis::DIST_CALC_TYPE)jarg7; 
  result = EFAL::PointAtDistance(arg1,arg2,arg3,(wchar_t const *)arg4,arg5,arg6,arg7);
  *(Ellis::DPNT **)&jresult = new Ellis::DPNT((const Ellis::DPNT &)result); 
  {
    if (arg4) delete[] arg4; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_Buffer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jdouble jarg4, jint jarg5, jint jarg6, jlong jarg7, jstring jarg8) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  double arg4 ;
  Ellis::MIUNIT arg5 ;
  Ellis::DIST_CALC_TYPE arg6 ;
  MI_UINT32 arg7 ;
  wchar_t *arg8 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (Ellis::MIUNIT)jarg5; 
  arg6 = (Ellis::DIST_CALC_TYPE)jarg6; 
  arg7 = (MI_UINT32)jarg7; 
  if(!jarg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg8_pstr = jenv->GetStringChars(jarg8, 0);
  if (!arg8_pstr) return 0;
  jsize arg8_len = jenv->GetStringLength(jarg8);
  if (arg8_len) {
    arg8 = new wchar_t[arg8_len + 1];
    for (jsize i = 0; i < arg8_len; ++i) {
      arg8[i] = ((wchar_t)arg8_pstr[i]);
    }
    arg8[arg8_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg8, arg8_pstr);
  
  result = (bool)EFAL::Buffer(arg1,arg2,arg3,arg4,arg5,arg6,arg7,(wchar_t const *)arg8);
  jresult = (jboolean)result; 
  {
    if (arg8) delete[] arg8; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_Transform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  if (arg4_len) {
    arg4 = new wchar_t[arg4_len + 1];
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4[i] = ((wchar_t)arg4_pstr[i]);
    }
    arg4[arg4_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg5_pstr = jenv->GetStringChars(jarg5, 0);
  if (!arg5_pstr) return 0;
  jsize arg5_len = jenv->GetStringLength(jarg5);
  if (arg5_len) {
    arg5 = new wchar_t[arg5_len + 1];
    for (jsize i = 0; i < arg5_len; ++i) {
      arg5[i] = ((wchar_t)arg5_pstr[i]);
    }
    arg5[arg5_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg5, arg5_pstr);
  
  result = (bool)EFAL::Transform(arg1,arg2,arg3,(wchar_t const *)arg4,(wchar_t const *)arg5);
  jresult = (jboolean)result; 
  {
    if (arg4) delete[] arg4; 
  }
  {
    if (arg5) delete[] arg5; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_Union_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  if (arg4_len) {
    arg4 = new wchar_t[arg4_len + 1];
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4[i] = ((wchar_t)arg4_pstr[i]);
    }
    arg4[arg4_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg5_pstr = jenv->GetStringChars(jarg5, 0);
  if (!arg5_pstr) return 0;
  jsize arg5_len = jenv->GetStringLength(jarg5);
  if (arg5_len) {
    arg5 = new wchar_t[arg5_len + 1];
    for (jsize i = 0; i < arg5_len; ++i) {
      arg5[i] = ((wchar_t)arg5_pstr[i]);
    }
    arg5[arg5_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg5, arg5_pstr);
  
  result = (bool)EFAL::Union(arg1,arg2,arg3,(wchar_t const *)arg4,(wchar_t const *)arg5);
  jresult = (jboolean)result; 
  {
    if (arg4) delete[] arg4; 
  }
  {
    if (arg5) delete[] arg5; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_ConvexHull_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  if (arg4_len) {
    arg4 = new wchar_t[arg4_len + 1];
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4[i] = ((wchar_t)arg4_pstr[i]);
    }
    arg4[arg4_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  result = (bool)EFAL::ConvexHull(arg1,arg2,arg3,(wchar_t const *)arg4);
  jresult = (jboolean)result; 
  {
    if (arg4) delete[] arg4; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_Intersect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  if (arg4_len) {
    arg4 = new wchar_t[arg4_len + 1];
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4[i] = ((wchar_t)arg4_pstr[i]);
    }
    arg4[arg4_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg5_pstr = jenv->GetStringChars(jarg5, 0);
  if (!arg5_pstr) return 0;
  jsize arg5_len = jenv->GetStringLength(jarg5);
  if (arg5_len) {
    arg5 = new wchar_t[arg5_len + 1];
    for (jsize i = 0; i < arg5_len; ++i) {
      arg5[i] = ((wchar_t)arg5_pstr[i]);
    }
    arg5[arg5_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg5, arg5_pstr);
  
  result = (bool)EFAL::Intersect(arg1,arg2,arg3,(wchar_t const *)arg4,(wchar_t const *)arg5);
  jresult = (jboolean)result; 
  {
    if (arg4) delete[] arg4; 
  }
  {
    if (arg5) delete[] arg5; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_Contains_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  if (arg4_len) {
    arg4 = new wchar_t[arg4_len + 1];
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4[i] = ((wchar_t)arg4_pstr[i]);
    }
    arg4[arg4_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  result = (bool)EFAL::Contains(arg1,arg2,arg3,(wchar_t const *)arg4);
  jresult = (jboolean)result; 
  {
    if (arg4) delete[] arg4; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_IsWithin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  if (arg4_len) {
    arg4 = new wchar_t[arg4_len + 1];
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4[i] = ((wchar_t)arg4_pstr[i]);
    }
    arg4[arg4_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  result = (bool)EFAL::IsWithin(arg1,arg2,arg3,(wchar_t const *)arg4);
  jresult = (jboolean)result; 
  {
    if (arg4) delete[] arg4; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_Intersects_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  if (arg4_len) {
    arg4 = new wchar_t[arg4_len + 1];
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4[i] = ((wchar_t)arg4_pstr[i]);
    }
    arg4[arg4_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  result = (bool)EFAL::Intersects(arg1,arg2,arg3,(wchar_t const *)arg4);
  jresult = (jboolean)result; 
  {
    if (arg4) delete[] arg4; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_EnvelopesIntersect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  if (arg4_len) {
    arg4 = new wchar_t[arg4_len + 1];
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4[i] = ((wchar_t)arg4_pstr[i]);
    }
    arg4[arg4_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  result = (bool)EFAL::EnvelopesIntersect(arg1,arg2,arg3,(wchar_t const *)arg4);
  jresult = (jboolean)result; 
  {
    if (arg4) delete[] arg4; 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_StringByteLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  Ellis::MICHARSET arg3 ;
  MI_UINT64 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = (Ellis::MICHARSET)jarg3; 
  result = (MI_UINT64)EFAL::StringByteLength(arg1,(wchar_t const *)arg2,arg3);
  jresult = (jlong)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JFALJNI_Utf8String2wchar(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  EFALHANDLE arg1 ;
  char *arg2 = (char *) 0 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (wchar_t *)EFAL::Utf8String2wchar(arg1,(char const *)arg2);
  
  jsize result_len = 0;
  jchar *conv_buf = 0;
  if(result) {
    result_len = wstrlen(result);
    conv_buf = new jchar[result_len + 1];
    for (jsize i = 0; i < result_len; ++i) {
      conv_buf[i] = (jchar)result[i];
    }
    conv_buf[result_len] = (jchar)'\0';
  }
  else {
    jsize result_len = 1;
    conv_buf = new jchar[result_len];
    conv_buf[0] = (jchar)'\0';
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf;
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JFALJNI_WcharString2Utf8(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (char *)EFAL::WcharString2Utf8(arg1,(wchar_t const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_CopyGeometry_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4) {
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return ;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return ;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  if (arg4_len) {
    arg4 = new wchar_t[arg4_len + 1];
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4[i] = ((wchar_t)arg4_pstr[i]);
    }
    arg4[arg4_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  EFAL::CopyGeometry(arg1,arg2,arg3,(wchar_t const *)arg4);
  {
    if (arg4) delete[] arg4; 
  }
}


SWIGEXPORT void JNICALL Java_JFALJNI_CopyGeometry_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return ;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    arg3 = new wchar_t[arg3_len + 1];
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3[i] = ((wchar_t)arg3_pstr[i]);
    }
    arg3[arg3_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  EFAL::CopyGeometry(arg1,(wchar_t const *)arg2,(wchar_t const *)arg3);
  {
    if (arg2) delete[] arg2; 
  }
  {
    if (arg3) delete[] arg3; 
  }
}


SWIGEXPORT void JNICALL Java_JFALJNI_GetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jbyteArray jarg2) {
  EFALHANDLE arg1 ;
  char *arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  {
    arg2 = (char*) jenv->GetByteArrayElements(jarg2, NULL);
    arg3 = jenv->GetArrayLength(jarg2);
  }
  EFAL::GetData(arg1,arg2,arg3);
  
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte*)arg2, 0); 
  }
}


SWIGEXPORT jstring JNICALL Java_JFALJNI_GetTableName(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jstring jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (wchar_t *)EFAL::GetTableName(arg1,arg2);
  
  jsize result_len = 0;
  jchar *conv_buf = 0;
  if(result) {
    result_len = wstrlen(result);
    conv_buf = new jchar[result_len + 1];
    for (jsize i = 0; i < result_len; ++i) {
      conv_buf[i] = (jchar)result[i];
    }
    conv_buf[result_len] = (jchar)'\0';
  }
  else {
    jsize result_len = 1;
    conv_buf = new jchar[result_len];
    conv_buf[0] = (jchar)'\0';
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JFALJNI_GetTableDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jstring jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (wchar_t *)EFAL::GetTableDescription(arg1,arg2);
  
  jsize result_len = 0;
  jchar *conv_buf = 0;
  if(result) {
    result_len = wstrlen(result);
    conv_buf = new jchar[result_len + 1];
    for (jsize i = 0; i < result_len; ++i) {
      conv_buf[i] = (jchar)result[i];
    }
    conv_buf[result_len] = (jchar)'\0';
  }
  else {
    jsize result_len = 1;
    conv_buf = new jchar[result_len];
    conv_buf[0] = (jchar)'\0';
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JFALJNI_GetTablePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jstring jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (wchar_t *)EFAL::GetTablePath(arg1,arg2);
  
  jsize result_len = 0;
  jchar *conv_buf = 0;
  if(result) {
    result_len = wstrlen(result);
    conv_buf = new jchar[result_len + 1];
    for (jsize i = 0; i < result_len; ++i) {
      conv_buf[i] = (jchar)result[i];
    }
    conv_buf[result_len] = (jchar)'\0';
  }
  else {
    jsize result_len = 1;
    conv_buf = new jchar[result_len];
    conv_buf[0] = (jchar)'\0';
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JFALJNI_GetTableGUID(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jstring jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (wchar_t *)EFAL::GetTableGUID(arg1,arg2);
  
  jsize result_len = 0;
  jchar *conv_buf = 0;
  if(result) {
    result_len = wstrlen(result);
    conv_buf = new jchar[result_len + 1];
    for (jsize i = 0; i < result_len; ++i) {
      conv_buf[i] = (jchar)result[i];
    }
    conv_buf[result_len] = (jchar)'\0';
  }
  else {
    jsize result_len = 1;
    conv_buf = new jchar[result_len];
    conv_buf[0] = (jchar)'\0';
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf;
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_GetTableCharset(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  Ellis::MICHARSET result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (Ellis::MICHARSET)EFAL::GetTableCharset(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JFALJNI_GetTableType(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jstring jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (wchar_t *)EFAL::GetTableType(arg1,arg2);
  
  jsize result_len = 0;
  jchar *conv_buf = 0;
  if(result) {
    result_len = wstrlen(result);
    conv_buf = new jchar[result_len + 1];
    for (jsize i = 0; i < result_len; ++i) {
      conv_buf[i] = (jchar)result[i];
    }
    conv_buf[result_len] = (jchar)'\0';
  }
  else {
    jsize result_len = 1;
    conv_buf = new jchar[result_len];
    conv_buf[0] = (jchar)'\0';
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf;
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_HasRaster(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (bool)EFAL::HasRaster(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_HasGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (bool)EFAL::HasGrid(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_IsSeamless(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (bool)EFAL::IsSeamless(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_IsVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (bool)EFAL::IsVector(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_SupportsInsert(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (bool)EFAL::SupportsInsert(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_SupportsUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (bool)EFAL::SupportsUpdate(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_SupportsDelete(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (bool)EFAL::SupportsDelete(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_SupportsBeginAccess(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (bool)EFAL::SupportsBeginAccess(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_GetReadVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_INT32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (MI_INT32)EFAL::GetReadVersion(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_GetEditVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_INT32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (MI_INT32)EFAL::GetEditVersion(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetRowCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (MI_UINT32)EFAL::GetRowCount(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetColumnCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (MI_UINT32)EFAL::GetColumnCount(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JFALJNI_GetColumnName(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (wchar_t *)EFAL::GetColumnName(arg1,arg2,arg3);
  
  jsize result_len = 0;
  jchar *conv_buf = 0;
  if(result) {
    result_len = wstrlen(result);
    conv_buf = new jchar[result_len + 1];
    for (jsize i = 0; i < result_len; ++i) {
      conv_buf[i] = (jchar)result[i];
    }
    conv_buf[result_len] = (jchar)'\0';
  }
  else {
    jsize result_len = 1;
    conv_buf = new jchar[result_len];
    conv_buf[0] = (jchar)'\0';
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf;
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_GetColumnType(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  Ellis::ALLTYPE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (Ellis::ALLTYPE_TYPE)EFAL::GetColumnType(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetColumnWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  MI_UINT32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (MI_UINT32)EFAL::GetColumnWidth(arg1,arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetColumnDecimals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  MI_UINT32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (MI_UINT32)EFAL::GetColumnDecimals(arg1,arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_IsColumnIndexed(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (bool)EFAL::IsColumnIndexed(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_IsColumnReadOnly(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (bool)EFAL::IsColumnReadOnly(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JFALJNI_GetColumnCSys(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (wchar_t *)EFAL::GetColumnCSys(arg1,arg2,arg3);
  
  jsize result_len = 0;
  jchar *conv_buf = 0;
  if(result) {
    result_len = wstrlen(result);
    conv_buf = new jchar[result_len + 1];
    for (jsize i = 0; i < result_len; ++i) {
      conv_buf[i] = (jchar)result[i];
    }
    conv_buf[result_len] = (jchar)'\0';
  }
  else {
    jsize result_len = 1;
    conv_buf = new jchar[result_len];
    conv_buf[0] = (jchar)'\0';
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetEntireBounds(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  Ellis::DRECT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = EFAL::GetEntireBounds(arg1,arg2,arg3);
  *(Ellis::DRECT **)&jresult = new Ellis::DRECT((const Ellis::DRECT &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetDefaultView(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  Ellis::DRECT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = EFAL::GetDefaultView(arg1,arg2,arg3);
  *(Ellis::DRECT **)&jresult = new Ellis::DRECT((const Ellis::DRECT &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetPointObjectCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  MI_UINT32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (MI_UINT32)EFAL::GetPointObjectCount(arg1,arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetLineObjectCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  MI_UINT32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (MI_UINT32)EFAL::GetLineObjectCount(arg1,arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetAreaObjectCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  MI_UINT32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (MI_UINT32)EFAL::GetAreaObjectCount(arg1,arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetMiscObjectCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  MI_UINT32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (MI_UINT32)EFAL::GetMiscObjectCount(arg1,arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_HasZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (bool)EFAL::HasZ(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_IsZRangeKnown(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (bool)EFAL::IsZRangeKnown(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetZRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  Ellis::DRANGE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = EFAL::GetZRange(arg1,arg2,arg3);
  *(Ellis::DRANGE **)&jresult = new Ellis::DRANGE((const Ellis::DRANGE &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_HasM(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (bool)EFAL::HasM(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_IsMRangeKnown(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (bool)EFAL::IsMRangeKnown(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetMRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  Ellis::DRANGE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = EFAL::GetMRange(arg1,arg2,arg3);
  *(Ellis::DRANGE **)&jresult = new Ellis::DRANGE((const Ellis::DRANGE &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JFALJNI_GetMetadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    arg3 = new wchar_t[arg3_len + 1];
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3[i] = ((wchar_t)arg3_pstr[i]);
    }
    arg3[arg3_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  result = (wchar_t *)EFAL::GetMetadata(arg1,arg2,(wchar_t const *)arg3);
  
  jsize result_len = 0;
  jchar *conv_buf = 0;
  if(result) {
    result_len = wstrlen(result);
    conv_buf = new jchar[result_len + 1];
    for (jsize i = 0; i < result_len; ++i) {
      conv_buf[i] = (jchar)result[i];
    }
    conv_buf[result_len] = (jchar)'\0';
  }
  else {
    jsize result_len = 1;
    conv_buf = new jchar[result_len];
    conv_buf[0] = (jchar)'\0';
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf;
  
  {
    if (arg3) delete[] arg3; 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_EnumerateMetadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  EFALHANDLE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (EFALHANDLE)EFAL::EnumerateMetadata(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_DisposeMetadataEnumerator(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  EFAL::DisposeMetadataEnumerator(arg1,arg2);
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_GetNextEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (bool)EFAL::GetNextEntry(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JFALJNI_GetCurrentMetadataKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jstring jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (wchar_t *)EFAL::GetCurrentMetadataKey(arg1,arg2);
  
  jsize result_len = 0;
  jchar *conv_buf = 0;
  if(result) {
    result_len = wstrlen(result);
    conv_buf = new jchar[result_len + 1];
    for (jsize i = 0; i < result_len; ++i) {
      conv_buf[i] = (jchar)result[i];
    }
    conv_buf[result_len] = (jchar)'\0';
  }
  else {
    jsize result_len = 1;
    conv_buf = new jchar[result_len];
    conv_buf[0] = (jchar)'\0';
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JFALJNI_GetCurrentMetadataValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jstring jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (wchar_t *)EFAL::GetCurrentMetadataValue(arg1,arg2);
  
  jsize result_len = 0;
  jchar *conv_buf = 0;
  if(result) {
    result_len = wstrlen(result);
    conv_buf = new jchar[result_len + 1];
    for (jsize i = 0; i < result_len; ++i) {
      conv_buf[i] = (jchar)result[i];
    }
    conv_buf[result_len] = (jchar)'\0';
  }
  else {
    jsize result_len = 1;
    conv_buf = new jchar[result_len];
    conv_buf[0] = (jchar)'\0';
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_SetMetadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jstring jarg4) {
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return ;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    arg3 = new wchar_t[arg3_len + 1];
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3[i] = ((wchar_t)arg3_pstr[i]);
    }
    arg3[arg3_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return ;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return ;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  if (arg4_len) {
    arg4 = new wchar_t[arg4_len + 1];
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4[i] = ((wchar_t)arg4_pstr[i]);
    }
    arg4[arg4_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  EFAL::SetMetadata(arg1,arg2,(wchar_t const *)arg3,(wchar_t const *)arg4);
  {
    if (arg3) delete[] arg3; 
  }
  {
    if (arg4) delete[] arg4; 
  }
}


SWIGEXPORT void JNICALL Java_JFALJNI_DeleteMetadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return ;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    arg3 = new wchar_t[arg3_len + 1];
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3[i] = ((wchar_t)arg3_pstr[i]);
    }
    arg3[arg3_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  EFAL::DeleteMetadata(arg1,arg2,(wchar_t const *)arg3);
  {
    if (arg3) delete[] arg3; 
  }
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_WriteMetadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (bool)EFAL::WriteMetadata(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_CreateNativeTableMetadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  Ellis::MICHARSET arg4 ;
  EFALHANDLE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    arg3 = new wchar_t[arg3_len + 1];
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3[i] = ((wchar_t)arg3_pstr[i]);
    }
    arg3[arg3_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  arg4 = (Ellis::MICHARSET)jarg4; 
  result = (EFALHANDLE)EFAL::CreateNativeTableMetadata(arg1,(wchar_t const *)arg2,(wchar_t const *)arg3,arg4);
  jresult = (jlong)result; 
  {
    if (arg2) delete[] arg2; 
  }
  {
    if (arg3) delete[] arg3; 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_CreateNativeXTableMetadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  Ellis::MICHARSET arg4 ;
  EFALHANDLE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    arg3 = new wchar_t[arg3_len + 1];
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3[i] = ((wchar_t)arg3_pstr[i]);
    }
    arg3[arg3_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  arg4 = (Ellis::MICHARSET)jarg4; 
  result = (EFALHANDLE)EFAL::CreateNativeXTableMetadata(arg1,(wchar_t const *)arg2,(wchar_t const *)arg3,arg4);
  jresult = (jlong)result; 
  {
    if (arg2) delete[] arg2; 
  }
  {
    if (arg3) delete[] arg3; 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_CreateGeopackageTableMetadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  Ellis::MICHARSET arg5 ;
  bool arg6 ;
  EFALHANDLE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    arg3 = new wchar_t[arg3_len + 1];
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3[i] = ((wchar_t)arg3_pstr[i]);
    }
    arg3[arg3_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  if (arg4_len) {
    arg4 = new wchar_t[arg4_len + 1];
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4[i] = ((wchar_t)arg4_pstr[i]);
    }
    arg4[arg4_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  arg5 = (Ellis::MICHARSET)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (EFALHANDLE)EFAL::CreateGeopackageTableMetadata(arg1,(wchar_t const *)arg2,(wchar_t const *)arg3,(wchar_t const *)arg4,arg5,arg6);
  jresult = (jlong)result; 
  {
    if (arg2) delete[] arg2; 
  }
  {
    if (arg3) delete[] arg3; 
  }
  {
    if (arg4) delete[] arg4; 
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_AddColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jint jarg4, jboolean jarg5, jlong jarg6, jlong jarg7, jstring jarg8) {
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  Ellis::ALLTYPE_TYPE arg4 ;
  bool arg5 ;
  MI_UINT32 arg6 ;
  MI_UINT32 arg7 ;
  wchar_t *arg8 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return ;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    arg3 = new wchar_t[arg3_len + 1];
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3[i] = ((wchar_t)arg3_pstr[i]);
    }
    arg3[arg3_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  arg4 = (Ellis::ALLTYPE_TYPE)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (MI_UINT32)jarg6; 
  arg7 = (MI_UINT32)jarg7; 
  if(!jarg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return ;
  }
  const jchar *arg8_pstr = jenv->GetStringChars(jarg8, 0);
  if (!arg8_pstr) return ;
  jsize arg8_len = jenv->GetStringLength(jarg8);
  if (arg8_len) {
    arg8 = new wchar_t[arg8_len + 1];
    for (jsize i = 0; i < arg8_len; ++i) {
      arg8[i] = ((wchar_t)arg8_pstr[i]);
    }
    arg8[arg8_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg8, arg8_pstr);
  
  EFAL::AddColumn(arg1,arg2,(wchar_t const *)arg3,arg4,arg5,arg6,arg7,(wchar_t const *)arg8);
  {
    if (arg3) delete[] arg3; 
  }
  {
    if (arg8) delete[] arg8; 
  }
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_CreateTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  EFALHANDLE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (EFALHANDLE)EFAL::CreateTable(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_DestroyTableMetadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  EFAL::DestroyTableMetadata(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_CreateSeamlessTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  Ellis::MICHARSET arg4 ;
  EFALHANDLE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    arg3 = new wchar_t[arg3_len + 1];
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3[i] = ((wchar_t)arg3_pstr[i]);
    }
    arg3[arg3_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  arg4 = (Ellis::MICHARSET)jarg4; 
  result = (EFALHANDLE)EFAL::CreateSeamlessTable(arg1,(wchar_t const *)arg2,(wchar_t const *)arg3,arg4);
  jresult = (jlong)result; 
  {
    if (arg2) delete[] arg2; 
  }
  {
    if (arg3) delete[] arg3; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_AddSeamlessComponentTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  Ellis::DRECT arg4 ;
  Ellis::DRECT *argp4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    arg3 = new wchar_t[arg3_len + 1];
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3[i] = ((wchar_t)arg3_pstr[i]);
    }
    arg3[arg3_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  argp4 = *(Ellis::DRECT **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Ellis::DRECT");
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)EFAL::AddSeamlessComponentTable(arg1,arg2,(wchar_t const *)arg3,arg4);
  jresult = (jboolean)result; 
  {
    if (arg3) delete[] arg3; 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_Select(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  EFALHANDLE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (EFALHANDLE)EFAL::Select(arg1,(wchar_t const *)arg2);
  jresult = (jlong)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_FetchNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (bool)EFAL::FetchNext(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_Rewind(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (bool)EFAL::Rewind(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_DisposeCursor(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  EFAL::DisposeCursor(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_JFALJNI_Insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  MI_INT32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (MI_INT32)EFAL::Insert(arg1,(wchar_t const *)arg2);
  jresult = (jint)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_Update(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  MI_INT32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (MI_INT32)EFAL::Update(arg1,(wchar_t const *)arg2);
  jresult = (jint)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_Delete(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  MI_INT32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (MI_INT32)EFAL::Delete(arg1,(wchar_t const *)arg2);
  jresult = (jint)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_Prepare(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  EFALHANDLE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (EFALHANDLE)EFAL::Prepare(arg1,(wchar_t const *)arg2);
  jresult = (jlong)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_DisposeStmt(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  EFAL::DisposeStmt(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_ExecuteSelect(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  EFALHANDLE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (EFALHANDLE)EFAL::ExecuteSelect(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_ExecuteInsert(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (long)EFAL::ExecuteInsert(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_ExecuteUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (long)EFAL::ExecuteUpdate(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_ExecuteDelete(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (long)EFAL::ExecuteDelete(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetCursorColumnCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (MI_UINT32)EFAL::GetCursorColumnCount(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JFALJNI_GetCursorColumnName(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (wchar_t *)EFAL::GetCursorColumnName(arg1,arg2,arg3);
  
  jsize result_len = 0;
  jchar *conv_buf = 0;
  if(result) {
    result_len = wstrlen(result);
    conv_buf = new jchar[result_len + 1];
    for (jsize i = 0; i < result_len; ++i) {
      conv_buf[i] = (jchar)result[i];
    }
    conv_buf[result_len] = (jchar)'\0';
  }
  else {
    jsize result_len = 1;
    conv_buf = new jchar[result_len];
    conv_buf[0] = (jchar)'\0';
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf;
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_GetCursorColumnType(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  Ellis::ALLTYPE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (Ellis::ALLTYPE_TYPE)EFAL::GetCursorColumnType(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JFALJNI_GetCursorColumnCSys(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (wchar_t *)EFAL::GetCursorColumnCSys(arg1,arg2,arg3);
  
  jsize result_len = 0;
  jchar *conv_buf = 0;
  if(result) {
    result_len = wstrlen(result);
    conv_buf = new jchar[result_len + 1];
    for (jsize i = 0; i < result_len; ++i) {
      conv_buf[i] = (jchar)result[i];
    }
    conv_buf[result_len] = (jchar)'\0';
  }
  else {
    jsize result_len = 1;
    conv_buf = new jchar[result_len];
    conv_buf[0] = (jchar)'\0';
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JFALJNI_GetCursorCurrentKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jstring jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  result = (wchar_t *)EFAL::GetCursorCurrentKey(arg1,arg2);
  
  jsize result_len = 0;
  jchar *conv_buf = 0;
  if(result) {
    result_len = wstrlen(result);
    conv_buf = new jchar[result_len + 1];
    for (jsize i = 0; i < result_len; ++i) {
      conv_buf[i] = (jchar)result[i];
    }
    conv_buf[result_len] = (jchar)'\0';
  }
  else {
    jsize result_len = 1;
    conv_buf = new jchar[result_len];
    conv_buf[0] = (jchar)'\0';
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf;
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_GetCursorIsNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (bool)EFAL::GetCursorIsNull(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JFALJNI_GetCursorValueString(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (wchar_t *)EFAL::GetCursorValueString(arg1,arg2,arg3);
  
  jsize result_len = 0;
  jchar *conv_buf = 0;
  if(result) {
    result_len = wstrlen(result);
    conv_buf = new jchar[result_len + 1];
    for (jsize i = 0; i < result_len; ++i) {
      conv_buf[i] = (jchar)result[i];
    }
    conv_buf[result_len] = (jchar)'\0';
  }
  else {
    jsize result_len = 1;
    conv_buf = new jchar[result_len];
    conv_buf[0] = (jchar)'\0';
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf;
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_GetCursorValueBoolean(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (bool)EFAL::GetCursorValueBoolean(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_JFALJNI_GetCursorValueDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (double)EFAL::GetCursorValueDouble(arg1,arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetCursorValueInt64(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  MI_INT64 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (MI_INT64)EFAL::GetCursorValueInt64(arg1,arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_GetCursorValueInt32(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  MI_INT32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (MI_INT32)EFAL::GetCursorValueInt32(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_JFALJNI_GetCursorValueInt16(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jshort jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  MI_INT16 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (MI_INT16)EFAL::GetCursorValueInt16(arg1,arg2,arg3);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JFALJNI_GetCursorValueStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (wchar_t *)EFAL::GetCursorValueStyle(arg1,arg2,arg3);
  
  jsize result_len = 0;
  jchar *conv_buf = 0;
  if(result) {
    result_len = wstrlen(result);
    conv_buf = new jchar[result_len + 1];
    for (jsize i = 0; i < result_len; ++i) {
      conv_buf[i] = (jchar)result[i];
    }
    conv_buf[result_len] = (jchar)'\0';
  }
  else {
    jsize result_len = 1;
    conv_buf = new jchar[result_len];
    conv_buf[0] = (jchar)'\0';
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_PrepareCursorValueBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  MI_UINT32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (MI_UINT32)EFAL::PrepareCursorValueBinary(arg1,arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_PrepareCursorValueGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  MI_UINT32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (MI_UINT32)EFAL::PrepareCursorValueGeometry(arg1,arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_JFALJNI_GetCursorValueTimespanInMilliseconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = (double)EFAL::GetCursorValueTimespanInMilliseconds(arg1,arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetCursorValueTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  EFALTIME result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = EFAL::GetCursorValueTime(arg1,arg2,arg3);
  *(EFALTIME **)&jresult = new EFALTIME((const EFALTIME &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetCursorValueDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  EFALDATE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = EFAL::GetCursorValueDate(arg1,arg2,arg3);
  *(EFALDATE **)&jresult = new EFALDATE((const EFALDATE &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetCursorValueDateTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  EFALHANDLE arg2 ;
  MI_UINT32 arg3 ;
  EFALDATETIME result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (EFALHANDLE)jarg2; 
  arg3 = (MI_UINT32)jarg3; 
  result = EFAL::GetCursorValueDateTime(arg1,arg2,arg3);
  *(EFALDATETIME **)&jresult = new EFALDATETIME((const EFALDATETIME &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_CreateVariable(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (bool)EFAL::CreateVariable(arg1,(wchar_t const *)arg2);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_JFALJNI_DropVariable(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  EFAL::DropVariable(arg1,(wchar_t const *)arg2);
  {
    if (arg2) delete[] arg2; 
  }
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetVariableCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  MI_UINT32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  result = (MI_UINT32)EFAL::GetVariableCount(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JFALJNI_GetVariableName(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jstring jresult = 0 ;
  EFALHANDLE arg1 ;
  MI_UINT32 arg2 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  arg2 = (MI_UINT32)jarg2; 
  result = (wchar_t *)EFAL::GetVariableName(arg1,arg2);
  
  jsize result_len = 0;
  jchar *conv_buf = 0;
  if(result) {
    result_len = wstrlen(result);
    conv_buf = new jchar[result_len + 1];
    for (jsize i = 0; i < result_len; ++i) {
      conv_buf[i] = (jchar)result[i];
    }
    conv_buf[result_len] = (jchar)'\0';
  }
  else {
    jsize result_len = 1;
    conv_buf = new jchar[result_len];
    conv_buf[0] = (jchar)'\0';
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf;
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_GetVariableType(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  Ellis::ALLTYPE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (Ellis::ALLTYPE_TYPE)EFAL::GetVariableType(arg1,(wchar_t const *)arg2);
  jresult = (jint)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_SetVariableValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  Ellis::ALLTYPE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    arg3 = new wchar_t[arg3_len + 1];
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3[i] = ((wchar_t)arg3_pstr[i]);
    }
    arg3[arg3_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  result = (Ellis::ALLTYPE_TYPE)EFAL::SetVariableValue(arg1,(wchar_t const *)arg2,(wchar_t const *)arg3);
  jresult = (jint)result; 
  {
    if (arg2) delete[] arg2; 
  }
  {
    if (arg3) delete[] arg3; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_GetVariableIsNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (bool)EFAL::GetVariableIsNull(arg1,(wchar_t const *)arg2);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JFALJNI_GetVariableValueString(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (wchar_t *)EFAL::GetVariableValueString(arg1,(wchar_t const *)arg2);
  
  jsize result_len = 0;
  jchar *conv_buf = 0;
  if(result) {
    result_len = wstrlen(result);
    conv_buf = new jchar[result_len + 1];
    for (jsize i = 0; i < result_len; ++i) {
      conv_buf[i] = (jchar)result[i];
    }
    conv_buf[result_len] = (jchar)'\0';
  }
  else {
    jsize result_len = 1;
    conv_buf = new jchar[result_len];
    conv_buf[0] = (jchar)'\0';
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf;
  
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_GetVariableValueBoolean(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (bool)EFAL::GetVariableValueBoolean(arg1,(wchar_t const *)arg2);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_JFALJNI_GetVariableValueDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (double)EFAL::GetVariableValueDouble(arg1,(wchar_t const *)arg2);
  jresult = (jdouble)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetVariableValueInt64(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  MI_INT64 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (MI_INT64)EFAL::GetVariableValueInt64(arg1,(wchar_t const *)arg2);
  jresult = (jlong)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JFALJNI_GetVariableValueInt32(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  MI_INT32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (MI_INT32)EFAL::GetVariableValueInt32(arg1,(wchar_t const *)arg2);
  jresult = (jint)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_JFALJNI_GetVariableValueInt16(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jshort jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  MI_INT16 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (MI_INT16)EFAL::GetVariableValueInt16(arg1,(wchar_t const *)arg2);
  jresult = (jshort)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JFALJNI_GetVariableValueStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (wchar_t *)EFAL::GetVariableValueStyle(arg1,(wchar_t const *)arg2);
  
  jsize result_len = 0;
  jchar *conv_buf = 0;
  if(result) {
    result_len = wstrlen(result);
    conv_buf = new jchar[result_len + 1];
    for (jsize i = 0; i < result_len; ++i) {
      conv_buf[i] = (jchar)result[i];
    }
    conv_buf[result_len] = (jchar)'\0';
  }
  else {
    jsize result_len = 1;
    conv_buf = new jchar[result_len];
    conv_buf[0] = (jchar)'\0';
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf;
  
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_PrepareVariableValueBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  MI_UINT32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (MI_UINT32)EFAL::PrepareVariableValueBinary(arg1,(wchar_t const *)arg2);
  jresult = (jlong)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_PrepareVariableValueGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  MI_UINT32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (MI_UINT32)EFAL::PrepareVariableValueGeometry(arg1,(wchar_t const *)arg2);
  jresult = (jlong)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JFALJNI_GetVariableColumnCSys(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (wchar_t *)EFAL::GetVariableColumnCSys(arg1,(wchar_t const *)arg2);
  
  jsize result_len = 0;
  jchar *conv_buf = 0;
  if(result) {
    result_len = wstrlen(result);
    conv_buf = new jchar[result_len + 1];
    for (jsize i = 0; i < result_len; ++i) {
      conv_buf[i] = (jchar)result[i];
    }
    conv_buf[result_len] = (jchar)'\0';
  }
  else {
    jsize result_len = 1;
    conv_buf = new jchar[result_len];
    conv_buf[0] = (jchar)'\0';
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf;
  
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_JFALJNI_GetVariableValueTimespanInMilliseconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (double)EFAL::GetVariableValueTimespanInMilliseconds(arg1,(wchar_t const *)arg2);
  jresult = (jdouble)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetVariableValueTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  EFALTIME result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = EFAL::GetVariableValueTime(arg1,(wchar_t const *)arg2);
  *(EFALTIME **)&jresult = new EFALTIME((const EFALTIME &)result); 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetVariableValueDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  EFALDATE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = EFAL::GetVariableValueDate(arg1,(wchar_t const *)arg2);
  *(EFALDATE **)&jresult = new EFALDATE((const EFALDATE &)result); 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JFALJNI_GetVariableValueDateTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  EFALDATETIME result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = EFAL::GetVariableValueDateTime(arg1,(wchar_t const *)arg2);
  *(EFALDATETIME **)&jresult = new EFALDATETIME((const EFALDATETIME &)result); 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_SetVariableIsNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (bool)EFAL::SetVariableIsNull(arg1,(wchar_t const *)arg2);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_SetVariableValueString(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    arg3 = new wchar_t[arg3_len + 1];
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3[i] = ((wchar_t)arg3_pstr[i]);
    }
    arg3[arg3_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  result = (bool)EFAL::SetVariableValueString(arg1,(wchar_t const *)arg2,(wchar_t const *)arg3);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  {
    if (arg3) delete[] arg3; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_SetVariableValueBoolean(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = jarg3 ? true : false; 
  result = (bool)EFAL::SetVariableValueBoolean(arg1,(wchar_t const *)arg2,arg3);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_SetVariableValueDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = (double)jarg3; 
  result = (bool)EFAL::SetVariableValueDouble(arg1,(wchar_t const *)arg2,arg3);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_SetVariableValueInt64(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  MI_INT64 arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = (MI_INT64)jarg3; 
  result = (bool)EFAL::SetVariableValueInt64(arg1,(wchar_t const *)arg2,arg3);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_SetVariableValueInt32(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  MI_INT32 arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = (MI_INT32)jarg3; 
  result = (bool)EFAL::SetVariableValueInt32(arg1,(wchar_t const *)arg2,arg3);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_SetVariableValueInt16(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jshort jarg3) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  MI_INT16 arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = (MI_INT16)jarg3; 
  result = (bool)EFAL::SetVariableValueInt16(arg1,(wchar_t const *)arg2,arg3);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_SetVariableValueStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    arg3 = new wchar_t[arg3_len + 1];
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3[i] = ((wchar_t)arg3_pstr[i]);
    }
    arg3[arg3_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  result = (bool)EFAL::SetVariableValueStyle(arg1,(wchar_t const *)arg2,(wchar_t const *)arg3);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  {
    if (arg3) delete[] arg3; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_SetVariableValueBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jbyteArray jarg3) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  MI_UINT32 arg3 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    arg3 = jenv->GetArrayLength(jarg3);
    arg4 = (char *)jenv->GetByteArrayElements(jarg3, NULL);
  }
  result = (bool)EFAL::SetVariableValueBinary(arg1,(wchar_t const *)arg2,arg3,(char const *)arg4);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  {
    jenv->ReleaseByteArrayElements(jarg3, (jbyte*)arg4, JNI_ABORT); 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_SetVariableValueGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jbyteArray jarg3, jstring jarg5) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  MI_UINT32 arg3 ;
  char *arg4 = (char *) 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    arg3 = jenv->GetArrayLength(jarg3);
    arg4 = (char *)jenv->GetByteArrayElements(jarg3, NULL);
  }
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg5_pstr = jenv->GetStringChars(jarg5, 0);
  if (!arg5_pstr) return 0;
  jsize arg5_len = jenv->GetStringLength(jarg5);
  if (arg5_len) {
    arg5 = new wchar_t[arg5_len + 1];
    for (jsize i = 0; i < arg5_len; ++i) {
      arg5[i] = ((wchar_t)arg5_pstr[i]);
    }
    arg5[arg5_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg5, arg5_pstr);
  
  result = (bool)EFAL::SetVariableValueGeometry(arg1,(wchar_t const *)arg2,arg3,(char const *)arg4,(wchar_t const *)arg5);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  {
    jenv->ReleaseByteArrayElements(jarg3, (jbyte*)arg4, JNI_ABORT); 
  }
  {
    if (arg5) delete[] arg5; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_SetVariableValueTimespanInMilliseconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = (double)jarg3; 
  result = (bool)EFAL::SetVariableValueTimespanInMilliseconds(arg1,(wchar_t const *)arg2,arg3);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_SetVariableValueTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  EFALTIME arg3 ;
  EFALTIME *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  argp3 = *(EFALTIME **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null EFALTIME");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)EFAL::SetVariableValueTime(arg1,(wchar_t const *)arg2,arg3);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_SetVariableValueDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  EFALDATE arg3 ;
  EFALDATE *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  argp3 = *(EFALDATE **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null EFALDATE");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)EFAL::SetVariableValueDate(arg1,(wchar_t const *)arg2,arg3);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JFALJNI_SetVariableValueDateTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  EFALHANDLE arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  EFALDATETIME arg3 ;
  EFALDATETIME *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (EFALHANDLE)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null wchar_t*");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    arg2 = new wchar_t[arg2_len + 1];
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2[i] = ((wchar_t)arg2_pstr[i]);
    }
    arg2[arg2_len] = (wchar_t)L'\0';
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  argp3 = *(EFALDATETIME **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null EFALDATETIME");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)EFAL::SetVariableValueDateTime(arg1,(wchar_t const *)arg2,arg3);
  jresult = (jboolean)result; 
  {
    if (arg2) delete[] arg2; 
  }
  return jresult;
}


#ifdef __cplusplus
}
#endif

